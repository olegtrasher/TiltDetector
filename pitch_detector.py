import tkinter as tk
from tkinter import filedialog, messagebox, ttk, scrolledtext
import cv2
from PIL import Image, ImageTk
import os
from ulsd_detector import ULSDDetector

class ULSD_GUI:
    def __init__(self, root):
        self.root = root
        self.root.title("ULSD: Line Detection & Pitch Calculator")
        self.root.geometry("1200x800")

        self.detector = ULSDDetector()
        self.original_image_path = None
        
        self.setup_ui()

    def setup_ui(self):
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        
        main_frame.columnconfigure(1, weight=3) # Give more weight to image frame
        main_frame.rowconfigure(1, weight=1)

        # --- Control Frame ---
        control_frame = ttk.LabelFrame(main_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", padding="10")
        control_frame.grid(row=0, column=0, rowspan=2, sticky="ns", padx=(0, 10))

        ttk.Button(control_frame, text="1. –í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", command=self.select_image).pack(fill=tk.X, pady=5)
        ttk.Button(control_frame, text="2. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å (–û–±—Ä–µ–∑–∞—Ç—å –∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä)", command=self.prepare_image).pack(fill=tk.X, pady=5)
        
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ª–∏–Ω–∏–π
        threshold_frame = ttk.Frame(control_frame)
        threshold_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(threshold_frame, text="–ü–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –ª–∏–Ω–∏–π:").pack(anchor=tk.W)
        threshold_input_frame = ttk.Frame(threshold_frame)
        threshold_input_frame.pack(fill=tk.X)
        
        self.threshold_var = tk.StringVar(value="0.65")
        self.threshold_entry = ttk.Entry(threshold_input_frame, textvariable=self.threshold_var, width=8)
        self.threshold_entry.pack(side=tk.LEFT, padx=(0, 5))
        
        ttk.Label(threshold_input_frame, text="(0.1 - 0.9)", font=("Arial", 8), foreground="gray").pack(side=tk.LEFT)
        
        # –ß–µ–∫–±–æ–∫—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–º–∞–Ω—ã—Ö –ª–∏–Ω–∏–π
        self.analyze_curvature_var = tk.BooleanVar(value=False)  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–æ
        curvature_checkbox = ttk.Checkbutton(control_frame, 
                                           text="–†–∞–∑–±–∏–≤–∞—Ç—å –ª–æ–º–∞–Ω—ã–µ –ª–∏–Ω–∏–∏ –Ω–∞ –ø—Ä—è–º—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã", 
                                           variable=self.analyze_curvature_var)
        curvature_checkbox.pack(anchor=tk.W, pady=2)
        
        ttk.Button(control_frame, text="3. –ù–∞–π—Ç–∏ –ª–∏–Ω–∏–∏ (ULSD)", command=self.detect_lines).pack(fill=tk.X, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ 4: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –ª–∏–Ω–∏–π –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —É–≥–ª–∞
        self.interactive_button = tk.Button(
            control_frame, 
            text="4. –í—ã—á–∏—Å–ª–∏—Ç—å —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞", 
            command=self.interactive_line_selection,
            font=("Arial", 12),
            bg="#E5FFE5",
            relief="solid",
            borderwidth=1,
            state="disabled"
        )
        self.interactive_button.pack(fill="x", pady=2)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Separator(control_frame, orient='horizontal').pack(fill=tk.X, pady=10)
        
        # –ù–û–í–û–ï –¢–ï–ö–°–¢–û–í–û–ï –ü–û–õ–ï –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        ttk.Label(control_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:").pack(anchor=tk.W)
        self.result_text = scrolledtext.ScrolledText(control_frame, height=8, width=35, wrap=tk.WORD, 
                                                   state=tk.NORMAL, cursor="xterm")
        self.result_text.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # –î–µ–ª–∞–µ–º —Ç–µ–∫—Å—Ç –≤—ã–¥–µ–ª—è–µ–º—ã–º –∏ –∫–æ–ø–∏—Ä—É–µ–º—ã–º
        self.result_text.bind("<Control-a>", self.select_all_text)
        self.result_text.bind("<Control-c>", lambda e: self.result_text.event_generate("<<Copy>>"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–º–µ—Ä–µ
        ttk.Separator(control_frame, orient='horizontal').pack(fill=tk.X, pady=5)
        info_text = "–ö–∞–º–µ—Ä–∞: Canon RF 5.2mm F/2.8 L\nDual Fisheye Lens\n\n–¢–æ—á–Ω–æ—Å—Ç—å: ¬±1¬∞\n–î–∏–∞–ø–∞–∑–æ–Ω: 0¬∞ –¥–æ 90¬∞"
        ttk.Label(control_frame, text=info_text, font=("Arial", 8), foreground="gray").pack(anchor=tk.W)

        # --- Image Frame ---
        image_frame = ttk.LabelFrame(main_frame, text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", padding="10")
        image_frame.grid(row=0, column=1, rowspan=2, sticky="nsew")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ç–∫—É –≤–Ω—É—Ç—Ä–∏ —Ä–∞–º–∫–∏, —á—Ç–æ–±—ã –≤–∏–¥–∂–µ—Ç –º–æ–≥ —Ä–∞—Å—Ç—è–≥–∏–≤–∞—Ç—å—Å—è
        image_frame.columnconfigure(0, weight=1)
        image_frame.rowconfigure(0, weight=1)

        self.image_label = ttk.Label(image_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ—Ä–µ–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º grid –∏ sticky, —á—Ç–æ–±—ã –≤–∏–¥–∂–µ—Ç —Ä–∞—Å—Ç—è–≥–∏–≤–∞–ª—Å—è
        self.image_label.grid(row=0, column=0, sticky="nsew")

    def select_image(self):
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ—Ä–µ–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            filetypes=[("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png *.jpg *.jpeg")]
        )
        if file_path:
            self.original_image_path = file_path
            self.display_image(file_path)
            self.log_result("‚úì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ")

    def prepare_image(self):
        if not self.original_image_path:
            self.log_result("‚ö† –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–®–∞–≥ 1)")
            return
        
        prepared_path, prepared_img_data = self.detector.prepare_image(self.original_image_path)
        if prepared_path:
            self.display_image(image_data=prepared_img_data)
            self.log_result("‚úì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ\n  –†–∞–∑–º–µ—Ä: 1024x512 –¥–ª—è ULSD")
        else:
            self.log_result("‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    def detect_lines(self):
        if not self.detector.prepared_image_path:
            self.log_result("‚ö† –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–®–∞–≥ 2)")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            threshold = float(self.threshold_var.get())
            if threshold < 0.1 or threshold > 0.9:
                self.log_result("‚ö† –ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.1 –¥–æ 0.9")
                return
        except ValueError:
            self.log_result("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞")
            return

        self.log_result(f"üîç –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏–Ω–∏–π (–ø–æ—Ä–æ–≥: {threshold})...")
        self.root.update()

        # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–≤–∏–∑–Ω—ã
        analyze_curvature = self.analyze_curvature_var.get()
        output_path = self.detector.run_detection(threshold=threshold, analyze_curvature=analyze_curvature)
        
        if output_path and os.path.exists(output_path):
            self.display_image(output_path)
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π
            line_count = len(self.detector.last_line_pred) if self.detector.last_line_pred is not None else 0
            self.log_result(f"‚úì –î–µ—Ç–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n  –ù–∞–π–¥–µ–Ω–æ –ª–∏–Ω–∏–π: {line_count}")
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É–≥–ª–∞ –Ω–∞–∫–ª–æ–Ω–∞
            self.interactive_button.config(state="normal")
        else:
            self.log_result("‚úó –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏–Ω–∏–π")



    def interactive_line_selection(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –ª–∏–Ω–∏–π"""
        try:
            self.log_result("üñ±Ô∏è –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ª–∏–Ω–∏–π...")
            
            # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –¥–µ—Ç–µ–∫—Ç–æ—Ä
            self.detector.log_function = self.log_result
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
            selector_window = self.detector.create_interactive_line_selector()
            
            if selector_window:
                self.log_result("‚úì –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ")
                self.log_result("  –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
                self.log_result("  ‚Ä¢ –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –ª–∏–Ω–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º–∏")
                self.log_result("  ‚Ä¢ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å—Ç–∞–Ω—É—Ç –∑–µ–ª–µ–Ω—ã–º–∏")
                self.log_result("  ‚Ä¢ –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –ª–∏–Ω–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞")
                self.log_result("  ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–í—ã—á–∏—Å–ª–∏—Ç—å —É–≥–æ–ª' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤—ã–±–æ—Ä")
            else:
                self.log_result("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ")
                
        except Exception as e:
            self.log_result(f"‚úó –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞: {e}")
            print(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞: {e}")

    def log_result(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.result_text.insert(tk.END, message + "\n\n")
        self.result_text.see(tk.END)
        self.root.update()
    
    def select_all_text(self, event):
        """–í—ã–¥–µ–ª—è–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.result_text.tag_add(tk.SEL, "1.0", tk.END)
        self.result_text.mark_set(tk.INSERT, "1.0")
        self.result_text.see(tk.INSERT)
        return 'break'

    def display_image(self, image_path=None, image_data=None):
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            self.root.update_idletasks()

            if image_data is not None:
                img = image_data
            elif image_path:
                img = cv2.imread(image_path)
            else:
                return

            if img is None:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

            img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            
            # --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è ---
            container_width = self.image_label.winfo_width()
            container_height = self.image_label.winfo_height()
            # –ó–∞–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–∫–Ω–æ –µ—â–µ –Ω–µ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ
            if container_width < 10 or container_height < 10:
                container_width, container_height = 600, 600

            img_h, img_w = img_rgb.shape[:2]
            img_aspect = img_w / img_h
            container_aspect = container_width / container_height

            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –≤–ø–∏—Å–∞—Ç—å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
            if img_aspect > container_aspect:
                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∏—Ä–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ -> –≤–ø–∏—Å—ã–≤–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
                display_w = container_width
                display_h = int(display_w / img_aspect)
            else:
                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—à–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ -> –≤–ø–∏—Å—ã–≤–∞–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
                display_h = container_height
                display_w = int(display_h * img_aspect)

            # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä
            if display_w < 1: display_w = 1
            if display_h < 1: display_h = 1
            
            img_resized = cv2.resize(img_rgb, (display_w, display_h))
            # ---
            
            pil_img = Image.fromarray(img_resized)
            self.photo = ImageTk.PhotoImage(pil_img)
            self.image_label.config(image=self.photo, text="")
        except Exception as e:
            self.log_result(f"‚úó –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")


def main():
    root = tk.Tk()
    app = ULSD_GUI(root)
    root.mainloop()

if __name__ == "__main__":
    main() 